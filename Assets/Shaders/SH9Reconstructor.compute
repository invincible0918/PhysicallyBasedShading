// Paint cubemap 6 faces to one render texture

#include "SH9Common.hlsl"

#pragma kernel CSMain

#define THREAD_X 8
#define THREAD_Y 8

RWTexture2D<float4> _Cubemap;
SamplerState Sampler_PointClamp;

uniform float4 _SH9[9];
uniform uint _FaceSize;
uniform float4 colors[10000];

static half3 faceBasis[18] = 
{
    //front
    {0,0,1},
    {1,0,0},
    {0,1,0},
    //back
    {1,0,0},
    {-1,0,0},
    {0,1,0},
    //left
    {0,0,0},
    {0,0,1},
    {0,1,0},
    //right
    {1,0,1},
    {0,0,-1},
    {0,1,0},
    //bottom
    {0,0,0},
    {1,0,0},
    {0,0,1},
    //top
    {0,1,1},
    {1,0,0},
    {0,0,-1}
};

static half2 uvOffsets[6] = 
{
    //front
    {1,1},
    //back
    {3,1},
    //left
    {0,1},
    //right
    {2,1},
    //bottom
    {1,0},
    //top
    {1,2}
};

[numthreads(THREAD_X, THREAD_Y, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint faceIndex = id.z;
    uint basisOffset = faceIndex * 3;
    uint3 center = uint3(_FaceSize, _FaceSize, _FaceSize) / 2;
    float3 ray = (faceBasis[basisOffset] * _FaceSize + id.x * faceBasis[basisOffset + 1] + id.y * faceBasis[basisOffset + 2]) - center;
    ray = normalize(ray);
    float3 p = float3(ray.x, ray.z, ray.y);
    float4 color =
        _SH9[0] * GetY00(p) +
        _SH9[1] * GetY1n1(p) +
        _SH9[2] * GetY10(p) +
        _SH9[3] * GetY1p1(p) +
        _SH9[4] * GetY2n2(p) +
        _SH9[5] * GetY2n1(p) +
        _SH9[6] * GetY20(p) +
        _SH9[7] * GetY2p1(p) +
        _SH9[8] * GetY2p2(p);
    uint2 uvOffset = uvOffsets[faceIndex] * _FaceSize;
    _Cubemap[id.xy + uvOffset] = color;
}

